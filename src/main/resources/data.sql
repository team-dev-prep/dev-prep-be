-- 인성 질문 (personality = 1, jobId = 0, time = 300)
INSERT INTO question (personality, jobId, time, Question, modelAnswer) VALUES
(1, 0, 300, '자신의 장점을 말해주세요.', '저는 어려운 상황에서도 끝까지 책임을 지며 팀의 목표를 이루기 위해 노력하는 태도를 가지고 있으며, 맡은 일은 미루지 않고 꾸준히 실천하며 끝마치는 습관이 있습니다.'),
(1, 0, 300, '자신의 단점을 말해주세요.', '저는 완벽하게 준비하려는 성향이 있어 가끔 실행에 옮기는 속도가 느릴 수 있습니다. 이를 보완하기 위해 우선순위를 나누어 실행과 검토를 병행하고 있습니다.'),
(1, 0, 300, '스트레스를 어떻게 관리하시나요?', '스트레스 상황에서는 문제의 원인을 정리하고, 산책이나 운동 같은 활동으로 생각을 환기시킨 뒤 다시 문제를 차분히 접근합니다.'),
(1, 0, 300, '협업 중 갈등을 해결한 경험이 있나요?', '의견 충돌이 있었던 상황에서 상대방의 입장을 경청한 후 제 입장을 논리적으로 설명하여 중간 지점을 찾아 문제를 해결한 경험이 있습니다.'),
(1, 0, 300, '어려운 문제에 부딪혔을 때 어떻게 해결하나요?', '문제를 작은 단위로 나누어 접근하며, 문서나 사례를 찾아보고 필요시 팀원에게 도움을 요청하여 효율적으로 해결합니다.'),
(1, 0, 300, '시간 관리를 어떻게 하나요?', '우선순위를 정하고 데드라인에 맞게 일정을 분할하여 계획표를 만들고, 매일 체크리스트를 활용하여 관리합니다.'),
(1, 0, 300, '책임감을 어떻게 발휘했나요?', '프로젝트 리더로서 팀원 간 역할 분담과 일정 관리에 책임감을 갖고 지속적으로 진행 상황을 점검하며 마감 기한을 맞췄습니다.'),
(1, 0, 300, '의사소통 능력을 발휘한 경험은?', '기획자와 개발자 간의 용어 이해 차이를 조율하며 공통 언어로 문서를 작성해 원활한 협업을 이끌었습니다.'),
(1, 0, 300, '목표를 달성하기 위해 했던 노력은?', '매일 작업 목표를 세우고, 점검 미팅을 통해 피드백을 받고 보완해가며 주어진 기간 내에 프로젝트를 완성했습니다.'),
(1, 0, 300, '실패를 극복한 경험은?', '처음 진행한 프로젝트에서 기술 선택 실수로 많은 리팩토링이 필요했지만 원인을 분석하고 구조를 재설계하여 성공적으로 마무리했습니다.');

-- 프론트엔드 기술 질문 (personality = 0, jobId = 0, time = 600)
INSERT INTO question (personality, jobId, time, Question, modelAnswer) VALUES
(0, 0, 600, 'React에서 상태 관리는 어떻게 하나요?', 'React에서는 useState, useReducer, Context API 또는 Redux와 같은 외부 상태관리 도구를 활용하여 컴포넌트 간 상태 공유 및 관리가 가능합니다.'),
(0, 0, 600, 'CSR과 SSR의 차이는?', 'CSR은 클라이언트에서 렌더링을 수행하는 방식이고, SSR은 서버에서 HTML을 만들어 클라이언트에 전달하는 방식으로 초기 로딩 속도와 SEO 측면에서 차이가 있습니다.'),
(0, 0, 600, 'useEffect의 역할은?', 'useEffect는 React 컴포넌트가 렌더링된 후 특정 작업을 수행하도록 하며, 주로 API 호출, 구독 설정, 타이머 설정 등에 사용됩니다.'),
(0, 0, 600, '컴포넌트 간 데이터를 전달하는 방법은?', '부모 컴포넌트에서 props로 자식에게 전달하거나, Context API를 통해 전역적으로 공유할 수 있습니다.'),
(0, 0, 600, 'React의 Virtual DOM이란?', 'Virtual DOM은 실제 DOM 변경 전 메모리상에서 변경 사항을 비교하고 효율적으로 반영하기 위한 React의 핵심 기능입니다.'),
(0, 0, 600, 'SPA의 장단점은?', 'SPA는 빠른 화면 전환과 부드러운 UX가 장점이나, 초기 로딩 속도와 SEO가 단점입니다. 이를 보완하기 위해 SSR이나 프리렌더링을 활용합니다.'),
(0, 0, 600, 'styled-components와 Tailwind CSS의 차이는?', 'styled-components는 JS 파일 안에서 스타일을 작성하고, Tailwind는 클래스 이름으로 유틸리티 스타일을 적용하는 방식으로 접근 방식이 다릅니다.'),
(0, 0, 600, 'React에서 key props가 필요한 이유는?', 'key는 리스트 렌더링 시 각 항목을 고유하게 식별해 효율적인 리렌더링을 가능하게 합니다.'),
(0, 0, 600, 'React Hook 중 커스텀 훅이란?', '커스텀 훅은 재사용 가능한 로직을 함수 형태로 추출해 여러 컴포넌트에서 활용하는 React Hook입니다.'),
(0, 0, 600, 'React에서 비동기 작업을 처리하는 방법은?', 'useEffect 안에서 fetch 또는 axios를 사용해 비동기 작업을 처리하고, async/await 문법과 상태 업데이트를 통해 결과를 반영합니다.');

-- 백엔드 기술 질문 (personality = 0, jobId = 1, time = 600)
INSERT INTO question (personality, jobId, time, Question, modelAnswer) VALUES
(0, 1, 600, 'Spring에서 의존성 주입은 무엇인가요?', 'Spring은 DI 컨테이너를 통해 객체 간 의존성을 주입하며, 이를 통해 유연하고 테스트 가능한 구조를 지원합니다. 주로 생성자 주입 방식이 권장됩니다.'),
(0, 1, 600, 'JPA에서 N+1 문제는 무엇인가요?', 'N+1 문제는 연관된 엔티티를 지연 로딩하면서 쿼리가 반복 발생하는 현상이며, fetch join이나 EntityGraph로 해결할 수 있습니다.'),
(0, 1, 600, 'Spring에서 @Transactional의 역할은?', '@Transactional은 하나의 메서드 안에서 수행되는 DB 작업을 하나의 트랜잭션으로 묶어 원자성을 보장하며, 롤백 처리를 가능하게 합니다.'),
(0, 1, 600, 'REST API의 설계 원칙은?', 'REST는 자원을 URI로 표현하고, HTTP 메서드로 행위를 구분하며, 무상태성을 유지하는 아키텍처 스타일입니다.'),
(0, 1, 600, 'Spring Boot와 Spring Framework의 차이는?', 'Spring Boot는 설정을 최소화하여 빠르게 애플리케이션을 개발할 수 있게 도와주는 도구이며, Spring Framework 위에서 동작합니다.'),
(0, 1, 600, 'JPA에서 Lazy와 Eager의 차이는?', 'Lazy는 실제 접근 시 쿼리가 실행되고, Eager는 엔티티 로딩 시 즉시 연관된 데이터를 가져오는 방식입니다.'),
(0, 1, 600, 'API 응답 속도 개선 방법은?', '캐시 적용, DB 인덱스 최적화, 페이징 처리, Redis 활용 등을 통해 응답 속도를 개선할 수 있습니다.'),
(0, 1, 600, 'Spring Security의 주요 기능은?', '인증, 권한 부여, 세션 관리, CSRF 보호 등을 통해 보안 기능을 손쉽게 구현할 수 있게 합니다.'),
(0, 1, 600, 'DTO와 Entity를 분리하는 이유는?', 'DTO는 계층 간 데이터 전달에 특화되어 있고, Entity는 DB 모델이므로 분리함으로써 관심사를 나누고 유지보수를 용이하게 합니다.'),
(0, 1, 600, 'ExceptionHandler를 사용하는 이유는?', '예외 상황에 대해 일관된 응답을 반환하고, 예외 처리 로직을 한곳에서 관리함으로써 코드 가독성과 유지보수를 향상시킵니다.');
